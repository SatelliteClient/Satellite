package com.github.satellite.features.module.exploit;

import com.github.satellite.Satellite;
import com.github.satellite.network.packet.Packet;
import com.github.satellite.network.packet.packets.*;
import com.github.satellite.event.Event;
import com.github.satellite.event.listeners.EventRecieveSateNet;
import com.github.satellite.event.listeners.EventUpdate;
import com.github.satellite.features.module.Module;
import com.github.satellite.features.test.botting.BotEvent;
import com.github.satellite.features.test.botting.listeners.Fill;
import com.github.satellite.features.test.botting.listeners.Goto;
import com.github.satellite.features.test.botting.listeners.Refill;
import com.github.satellite.utils.BlockUtils;
import com.github.satellite.utils.ClientUtils;
import com.github.satellite.utils.InventoryUtils;
import com.github.satellite.utils.PlayerUtils;
import net.minecraft.block.Block;
import net.minecraft.block.BlockAir;
import net.minecraft.block.BlockLiquid;
import net.minecraft.block.state.IBlockState;
import net.minecraft.entity.MoverType;
import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3d;
import org.lwjgl.input.Keyboard;

import java.util.concurrent.CopyOnWriteArrayList;

public class Bot extends Module {

	public Bot() {
		super("Bot", Keyboard.KEY_NONE, Category.EXPLOIT);
	}

	@Override
	public void init() {
		this.tasks = new CopyOnWriteArrayList<BotEvent>();
		super.init();
	}

	CopyOnWriteArrayList<BotEvent> tasks;

	public BlockPos stash;

	@Override
	public void onEvent(Event<?> e) {
		if(e instanceof EventRecieveSateNet) {
			EventRecieveSateNet event = (EventRecieveSateNet)e;
			Packet p = event.getData();
			if(p instanceof SPGoto) {
				SPGoto packet = (SPGoto)p;
				tasks.add(new Goto(packet.getX(), packet.getY(), packet.getZ()));
			}
			if(p instanceof SPChangeBlockAction) {
				SPChangeBlockAction packet = (SPChangeBlockAction)p;
				tasks.add(new Fill(packet.getX(), packet.getY(), packet.getZ(), packet.getX(), packet.getY(), packet.getZ(), packet.getAction()));
			}
			if(p instanceof SPFillBlocks) {
				SPFillBlocks packet = (SPFillBlocks)p;
				tasks.add(new Fill(packet.getX1(), packet.getY1(), packet.getZ1(), packet.getX2(), packet.getY2(), packet.getZ2(), packet.getBlock()));
			}
			if (p instanceof SPRefillPoint) {
				SPRefillPoint packet = (SPRefillPoint)p;
				this.stash = packet.getBlockPos();
			}
			if (p instanceof SPClear) {
				tasks.clear();
			}
		}
		if(e instanceof EventUpdate) {
			if(tasks.isEmpty())
				return;
			if(tasks.get(0) instanceof Refill) {
				Refill refill = (Refill)tasks.get(0);
				tasks.add(new Goto(stash.getX(), -1, stash.getZ()));
			}
			if(tasks.isEmpty())
				return;
			if(tasks.get(0) instanceof Fill) {
				System.out.println(85);
				Fill fill = (Fill)tasks.get(0);
				int FilledHeight = isFilledAndHeight(fill.getX1(), fill.getZ1(), fill.getY1(), fill.getY2(), fill.getBlock());
				int sHeight = mc.world.isBlockLoaded(fill.getFill1(), false)?Math.max(mc.world.getHeight(fill.getX1(), fill.getZ1()), FilledHeight):255;
				int eHeight = mc.world.isBlockLoaded(fill.getFill2(), false)?Math.max(mc.world.getHeight(fill.getX2(), fill.getZ2()), FilledHeight):255;
				if(e.isPre()) {
					boolean done = FilledHeight >= fill.getY2();

					if(done) {
						tasks.remove(0);
						System.out.print("[Bot] Done Building!\n");
						return;
					}

					double dx = fill.getX1()+0.5 - mc.player.posX,
							dz = fill.getZ1()+0.5 - mc.player.posZ,
							dy = Math.min(sHeight, eHeight) - mc.player.posY,
							dist = Math.sqrt(dx*dx+dz*dz);
					double h = dist>1?1:dist;

					if(true || (Math.abs(dx)==0 && Math.abs(dz)==0 && !(mc.world.getBlockState(new BlockPos(mc.player).offset(EnumFacing.DOWN, 2)).getBlock() instanceof BlockAir))) {
						BlockPos pos = new BlockPos(mc.player).offset(EnumFacing.DOWN);

						if(pos.getY()>=FilledHeight-2) {
							int s = mc.player.inventory.currentItem;
							int item = mc.player.inventory.currentItem;
							if(mc.world.getBlockState(pos).isFullBlock()) mc.player.move(MoverType.SELF, 0, -1, 0);
							if(mc.world.getBlockState(pos).getBlock() instanceof BlockLiquid) {

								int bucket = InventoryUtils.pickItem(325);
								int wetbucket = item = InventoryUtils.pickItem(326);
								if(bucket != -1) {
									mc.player.inventory.currentItem = bucket;
								}
								if(wetbucket != -1) {
									mc.player.inventory.currentItem = wetbucket;
								}
								if(mc.player.capabilities.allowEdit) {

									BlockUtils block = BlockUtils.isPlaceable(pos, 0, false);
									if (block != null) {
										block.doPlace(false);
									}
									block = BlockUtils.isPlaceable(pos.offset(EnumFacing.DOWN), 0, false);
									if (block != null) {
										block.doPlace(false);
									}
								}
							}else {
								item = InventoryUtils.pickItem(278);
								mc.player.inventory.currentItem = item != -1 ? item : mc.player.inventory.currentItem ;
								if(mc.playerController.onPlayerDamageBlock(pos, EnumFacing.UP) && fill.getBlock() != 0 && FilledHeight-1>=fill.getY1() && mc.player.posY-1<FilledHeight) {
									item = InventoryUtils.pickItem(fill.getBlock());
									if(item != -1) {
										mc.player.inventory.currentItem = item;
									}else {
										try {
											tasks.add(new Refill(stash.getX(), stash.getY(), stash.getZ()));
										}catch (Exception exception) {
											exception.printStackTrace();
										}
									}
									mc.player.motionY=-1;
									BlockUtils block = BlockUtils.isPlaceable(pos, 0, true);
									if(block != null) block.doPlace(false);
									block = BlockUtils.isPlaceable(pos.offset(EnumFacing.DOWN), 0, true);
									if(block != null) block.doPlace(false);
									ClientUtils.setTimer(2);
								}else {
									ClientUtils.setTimer(1);
								}

								mc.player.inventory.currentItem=s;
							}

							FilledHeight = isFilledAndHeight(fill.getX1(), fill.getZ1(), fill.getY1(), fill.getY2(), fill.getBlock());
							dy = Math.max(sHeight, eHeight) - mc.player.posY;
						}
					}

					if(dy<=0) {
						mc.player.motionX=h*Math.sin(Math.atan2(dx, dz));
						mc.player.motionZ=h*Math.cos(Math.atan2(dx, dz));
					}
					mc.player.motionY=Math.max(Math.min(dy, 1), -1);
					PlayerUtils.move();
					PlayerUtils.freeze();
				}
			}
			if(e.isPre()) {
				if(tasks.get(0) instanceof Goto) {
					Goto gOto = (Goto)tasks.get(0);
					double dx = gOto.getX()+0.5 - mc.player.posX,
							dz = gOto.getZ()+0.5 - mc.player.posZ,
							dy = (dx==0&&dz==0?(gOto.getY()==-1?mc.world.getHeight(gOto.getX(), gOto.getZ()): gOto.getY()):255) - mc.player.posY,
							dist = Math.sqrt(dx*dx+dz*dz),
							h = dist>1?1:dist;
					h = dy==0?h:0;
					mc.player.motionX=h*Math.sin(Math.atan2(dx, dz));
					mc.player.motionZ=h*Math.cos(Math.atan2(dx, dz));
					mc.player.motionY=Math.max(Math.min(dy, 1), -1);
					PlayerUtils.move();
					PlayerUtils.freeze();
					if(dx==0&&dz==0&&dy==0) tasks.remove(0);
					if(mc.player.collidedHorizontally) tasks.remove(0);
				}

			}
			Satellite.SatelliteNet.netWorkManager.sendPacket(new CPPosition((int)mc.player.posX, (int)mc.player.posY, (int)mc.player.posZ));
		}
		super.onEvent(e);
	}

	public int isFilledAndHeight(int x, int z, int y1, int y2, int block) {
		for(int y = y1; y <= y2; y++) {
			BlockPos pos = new BlockPos(x, y, z);
			if(!(mc.world.getBlockState(pos).getBlock() == Block.getBlockById(block))) {
				return y+1;
			}
		}
		return y2;
	}

	public int getHeight(int x, int z) {
		for(int y = 255; y >= 0; y--) {
			BlockPos pos = new BlockPos(x, y, z);
			IBlockState iblockstate = mc.world.getBlockState(pos);
			if(!(iblockstate instanceof BlockAir)) {
				return y;
			}
		}
		return 255;
	}

	public enum BotTask {
		GOTO,
		FILL,
		REFILLITEMS,
		DONE;
	}
}
